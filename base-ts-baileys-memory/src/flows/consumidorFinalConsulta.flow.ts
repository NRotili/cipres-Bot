import { addKeyword, EVENTS } from "@builderbot/bot";
import { consumidorFinalConsultaFlow } from "./consumidorFinal.flow";
import { reset, stop } from "~/utils/idle-custom";
import { finalFlow } from "./final.flow";
import axios from "axios";
import { config } from "dotenv";
import { waitT } from "~/utils/presenceUpdate";

const consumidorFinalConsultaAsesorFlow = addKeyword(EVENTS.ACTION)
  .addAction(async (ctx, { flowDynamic }) => {
    reset(ctx, flowDynamic, 300000);
  })
  .addAnswer(
    "Perfecto, esperamos tu consulta para derivarte con nuestros asesores... üßê",
    { capture: true, delay: 1000 }
  )
  .addAction(async (ctx, { provider, flowDynamic, blacklist, state }) => {
    blacklist.add(ctx.from);
    stop(ctx);
    config();
    try {
      const myState = state.getMyState();
      const response = await axios.put(
        process.env.URL_WEB + "wsp/listaEspera/" + myState.id,
        {
          status: "1",
          consulta: ctx.body,
          tipo: "Consumidor Final - Consulta",
        }
      );

      await flowDynamic([
        {
          body: "Ya hemos recibido tu consulta, un agente se pondr√° en contacto contigo a la brevedad.",
          delay: 2000
        },
      ]);
      await flowDynamic([
        {
          body:
            "Tu posici√≥n en la lista de espera es: *" +
            response.data.cantEsperando +
            "*, por favor aguarda a ser atendido. üòÅ",
          delay: 3000,
        },
      ]);
    } catch (error) {
      console.log("Error al cargar consulta desde CF: " + error);
    }
  });

const consumidorFinalConsultaEnviosFlow = addKeyword(EVENTS.ACTION)
  .addAction(async (ctx, { flowDynamic }) => {
    reset(ctx, flowDynamic, 300000);

    await flowDynamic([
      {
        body:
          "üì¶ PEDIDOS Y ENVIOS\nüõí COMPRAS minoristas\n‚Ä¢ Servicio de cadeter√≠a a cargo del cliente en el instante.\n‚Ä¢ O nosotros enviamos tu pedido por un costo adicional de $1.500 solo por la ma√±ana en d√≠as espec√≠ficos de la semana (consultar).\n‚ôªÔ∏è DEVOLUCI√ìN BIDONES\nPara que no abone doble viaje se adjunta en el ticket de compra el valor del mismo para poder canjearlo cuando desee. El comprobante deber√° ser presentado junto con el bid√≥n vac√≠o en perfecto estado para la devoluci√≥n del dinero.\nüöõ ENVIO GRATIS\nPara compras superiores a $15.000 üëâüèΩ entregas por la ma√±ana, coordinando un d√≠a de la semana.\nüì≤ REALICE SU PEDIDO Y RETIRE POR NUESTRO LOCAL\nBrindamos tambi√©n la posibilidad de armarle su pedido para ser retirado sin demoras por nuestro local de üìçUrquiza 721, Villa Constituci√≥n de üïö Lunes a Viernes de 8 a 18 y S√°bados de 8:30 a 13.",
          delay:4000
      },
    ]);
    await flowDynamic([{
        body: "Otra consulta? ü§î\n\n1Ô∏è‚É£. S√≠\n2Ô∏è‚É£. No",
        delay: 2000
    }]);
  })
  .addAction({capture:true},async (ctx, ctxFn) => {
    const bodyText: string = ctx.body.toLowerCase();
      const keywords: string[] = ["1", "2"];
      const containsKeyword = keywords.some((keyword) =>
        bodyText.includes(keyword)
      );

      if (containsKeyword) {
        switch (bodyText) {
          case "1":
            return ctxFn.gotoFlow(consumidorFinalConsultaFlow);
          case "2":
            return ctxFn.gotoFlow(finalFlow);
        }
      } else {
        return ctxFn.fallBack(
          "Debes seleccionar una opci√≥n v√°lida.\n\n1Ô∏è‚É£. S√≠\n2Ô∏è‚É£. No"
        );
      }
  });

const consumidorFinalConsultaPreciosFlow = addKeyword(EVENTS.ACTION)
  .addAction(async (ctx, { provider, flowDynamic }) => {
    reset(ctx, flowDynamic, 300000);

    await flowDynamic([{
        body: "Te comparto el link para que puedas acceder a nuestro catalogo online exclusivo para clientes! üòâ",
        delay: 2000
    }])
    await flowDynamic([{
        body: "https://catalogos.cipresdigital.com.ar/catalogo/consfinal/Consumidor.Final",
        delay: 2000
    }])
    await flowDynamic([{
        body: "Otra consulta? ü§î\n\n1Ô∏è‚É£. S√≠\n2Ô∏è‚É£. No",
        delay: 2000
    }]);
  })
  .addAction({capture:true},async (ctx, ctxFn) => {
    const bodyText: string = ctx.body.toLowerCase();
    const keywords: string[] = ["1", "2"];
    const containsKeyword = keywords.some((keyword) =>
      bodyText.includes(keyword)
    );

    if (containsKeyword) {
      switch (bodyText) {
        case "1":
          return ctxFn.gotoFlow(consumidorFinalConsultaFlow);
        case "2":
          return ctxFn.gotoFlow(finalFlow);
      }
    } else {
      return ctxFn.fallBack(
        "Parece que esa opci√≥n no es v√°lida. ü§Ø\n\n 1Ô∏è‚É£. S√≠\n 2Ô∏è‚É£. No"
      );
    }
  });


const consumidorFinalConsultaHorariosFlow = addKeyword(EVENTS.ACTION)
  .addAction(async (ctx, { flowDynamic }) => {
    reset(ctx, flowDynamic, 300000);

    await flowDynamic([{
        body: "üï• Nuestros horarios de atenci√≥n son:\n\nüï• Lunes a Viernes de 8hs a 18hs\nüï• S√°bados de 8:30hs a 13hs.",
        delay: 2000
    }])

    await flowDynamic([{
        body: "IMPORTANTE ‚ö†Ô∏è\n\nCompras de mayoristas y revendedores √∫nicamente podr√°n ser efectuadas de Lunes a Viernes. Sin excepci√≥n.\n\nTe esperamos en üìç Urquiza 721, Villa Constituci√≥n",
        delay: 4000
    }])

    await flowDynamic([{
        body: "Otra consulta? ü§î\n\n1Ô∏è‚É£. S√≠\n2Ô∏è‚É£. No",
        delay: 2000
    }]);
  })
  .addAction({capture:true},async (ctx, ctxFn) => {
    const bodyText: string = ctx.body.toLowerCase();
    const keywords: string[] = ["1", "2"];
    const containsKeyword = keywords.some((keyword) =>
      bodyText.includes(keyword)
    );

    if (containsKeyword) {
      switch (bodyText) {
        case "1":
          return ctxFn.gotoFlow(consumidorFinalConsultaFlow);
        case "2":
          return ctxFn.gotoFlow(finalFlow);
      }
    } else {
      return ctxFn.fallBack(
        "Tienes que seleccionar una de las opciones.\n\n 1Ô∏è‚É£. S√≠\n 2Ô∏è‚É£. No"
      );
    }
  });

export {
  consumidorFinalConsultaHorariosFlow,
  consumidorFinalConsultaPreciosFlow,
  consumidorFinalConsultaEnviosFlow,
  consumidorFinalConsultaAsesorFlow,
};

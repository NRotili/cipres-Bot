import { addKeyword, EVENTS } from "@builderbot/bot";
import { consumidorFinalConsultaFlow } from "./consumidorFinal.flow";
import { reset } from "~/utils/idle-custom";

// const revendedorAromatizacionConsultaAsesorFlow = addKeyword(EVENTS.ACTION)

const consumidorFinalConsultaEnviosFlow = addKeyword(EVENTS.ACTION)
    .addAction(async (ctx, { flowDynamic }) => {
        reset(ctx, flowDynamic, 300000);
    })
    .addAnswer([
        "üì¶ PEDIDOS Y ENVIOS ",
        "üõí COMPRAS minoristas",
        "‚Ä¢ Servicio de cadeter√≠a a cargo del cliente en el instante.",
        "‚Ä¢ O nosotros enviamos tu pedido por un costo adicional de $1.500 solo por la ma√±ana en d√≠as espec√≠ficos de la semana (consultar).",
        "‚ôªÔ∏è DEVOLUCI√ìN BIDONES",
        "Para que no abone doble viaje se adjunta en el ticket de compra el valor del mismo para poder canjearlo cuando desee. El comprobante deber√° ser presentado junto con el bid√≥n vac√≠o en perfecto estado para la devoluci√≥n del dinero.",
        "üöõ ENVIO GRATIS",
        "Para compras superiores a $10.000 üëâüèΩ entregas por la ma√±ana, coordinando un d√≠a de la semana.",
        "üì≤ REALICE SU PEDIDO Y RETIRE POR NUESTRO LOCAL",
        "Brindamos tambi√©n la posibilidad de armarle su pedido para ser retirado sin demoras por nuestro local de üìçUrquiza 721, Villa Constituci√≥n de üïö Lunes a Viernes de 8 a 18 y S√°bados de 8:30 a 13."
    ], {delay: 1000})
    .addAnswer(['Otra consulta? ü§î','1Ô∏è‚É£. S√≠', '2Ô∏è‚É£. No'], {delay: 1000, capture: true},
    async (ctx, ctxFn) => {
        const bodyText: string = ctx.body.toLowerCase();
        const keywords: string[] = ['1', 's√≠', 'si', '2', 'no'];
        const containsKeyword = keywords.some(keyword => bodyText.includes(keyword));

        if (containsKeyword) {
            switch (bodyText) {
                case '1':
                case 's√≠':
                case 'si':
                    return ctxFn.gotoFlow(consumidorFinalConsultaFlow);
                case '2':
                case 'no':
                    return ctxFn.endFlow();
            }
        } else {
            return ctxFn.fallBack("Debes seleccionar una opci√≥n v√°lida");
        }
    });

const consumidorFinalConsultaPreciosFlow = addKeyword(EVENTS.ACTION)
    .addAction(async (ctx, { flowDynamic }) => {
        reset(ctx, flowDynamic, 300000);
    })
    .addAnswer("Te comparto el link para que puedas acceder a nuestro catalogo online exclusivo para clientes! üòâ", {delay: 1000})
    .addAnswer("https://catalogos.cipresdigital.com.ar/catalogo/consfinal/Consumidor.Final", {delay: 1000})
    .addAnswer(['Otra consulta? ü§î','1Ô∏è‚É£. S√≠', '2Ô∏è‚É£. No'], {delay: 1000, capture: true},
    async (ctx, ctxFn) => {
        const bodyText: string = ctx.body.toLowerCase();
        const keywords: string[] = ['1', 's√≠', 'si', '2', 'no'];
        const containsKeyword = keywords.some(keyword => bodyText.includes(keyword));

        if (containsKeyword) {
            switch (bodyText) {
                case '1':
                case 's√≠':
                case 'si':
                    return ctxFn.gotoFlow(consumidorFinalConsultaFlow);
                case '2':
                case 'no':
                    return ctxFn.endFlow();
            }
        } else {
            return ctxFn.fallBack("Parece que esa opci√≥n no es v√°lida. ü§Ø");
        }
    });

const consumidorFinalConsultaHorariosFlow = addKeyword(EVENTS.ACTION)
    .addAction(async (ctx, { flowDynamic }) => {
        reset(ctx, flowDynamic, 300000);
    })
    .addAnswer(["üï• Lunes a Viernes de 8hs a 18hs",
        "üï• S√°bados de 8:30hs a 13hs."], {delay: 1000})
    .addAnswer(["IMPORTANTE ‚ö†Ô∏è",
        "Compras de mayoristas y revendedores √∫nicamente podr√°n ser efectuadas de Lunes a Viernes. Sin excepci√≥n.", "Te esperamos en üìç Urquiza 721, Villa Constituci√≥n"])
    .addAnswer(['Otra consulta? ü§î','1Ô∏è‚É£. S√≠', '2Ô∏è‚É£. No'], {delay: 1000, capture: true},
    async (ctx, ctxFn) => {
        const bodyText: string = ctx.body.toLowerCase();
        const keywords: string[] = ['1', 's√≠', 'si', '2', 'no'];
        const containsKeyword = keywords.some(keyword => bodyText.includes(keyword));

        if (containsKeyword) {
            switch (bodyText) {
                case '1':
                case 's√≠':
                case 'si':
                    return ctxFn.gotoFlow(consumidorFinalConsultaFlow);
                case '2':
                case 'no':
                    return ctxFn.endFlow();
            }
        } else {
            return ctxFn.fallBack("Tienes que seleccionar una de las opciones");
        }
    });



export { consumidorFinalConsultaHorariosFlow, consumidorFinalConsultaPreciosFlow, consumidorFinalConsultaEnviosFlow };